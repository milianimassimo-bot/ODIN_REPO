import os,sys,sqlite3;from pathlib import Path;DEF_DB=Path('logs')/'odin_ml.db';def ro_connect(p):return sqlite3.connect('file:'+p.resolve().as_posix()+'?mode=ro',uri=True);def tab_exists(con,n):return con.execute("SELECT 1 FROM sqlite_master WHERE type='table' AND name=?",(n,)).fetchone()is not None;def count_tbl(con,t):return con.execute(f'SELECT COUNT(*) FROM {t}').fetchone()[0] if tab_exists(con,t) else None;def last_outcomes(con,n=5):\n    if not tab_exists(con,'outcomes'):\n        print("Ultimi outcomes: tabella 'outcomes' assente.");return\n    print(f'Ultimi outcomes (max {n}):');\n    for r in con.execute('SELECT ts_utc, asset, strategy, pnl_abs, exit_reason FROM outcomes ORDER BY rowid DESC LIMIT ?', (n,)):\n        print(' -', r)\n\ndef main():\n    db=Path(sys.argv[1]) if len(sys.argv)>=2 else DEF_DB; n=int(sys.argv[2]) if len(sys.argv)>=3 else 5\n    print('\\n=== CHECK ODIN_ML.DB ===')\n    if not db.exists():\n        print(f'❌ DB non trovato: {db}');print('\\n=========================\\n');return\n    try:\n        with ro_connect(db) as con:\n            sig=count_tbl(con,'signals'); out=count_tbl(con,'outcomes')\n            print(f'signals: {sig if sig is not None else "—"} | outcomes: {out if out is not None else "—"}\\n')\n            last_outcomes(con,n)\n    except sqlite3.Error as e:\n        print('❌ Errore SQLite:', e)\n    print('\\n=========================\\n')\n\nif __name__=='__main__': main()\n